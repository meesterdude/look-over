= LooksGood

A visual RSpec matcher to ensure the entire page (or specific elements) have not changed. Allows for a tolerance to be set, so you can reuire pixel-perfect or allow for some minor changes. 

-------------------------------------

== Installation:

  gem install looks_good

In rails_helper.rb:

  #main app
  require 'looks_good'
  require 'looks_good/matchers/look_like_matcher'

=== Configuration settings:

==== Reference_image_path - sets where the reference and diff images are saved to.

For Rails application, a default reference images folder will be created at spec/reference_images. This folder is root to all the reference
images to be compares.

Also created are subfolders:
- /candidate  - will hold candidate images which can be used as reference images
- /diff - will hold the diff images generated by failed comparison tests
- /temp - will only ever hold one screenshot at a time, used to create the cropped element

==== max_no_tries 
- sets how many times looks_good will try and match the element against the reference image. Handy to reduce fragility of tests due to animations and load times. Defaults to 1.

==== default_within
- a float between 0 and 1 that sets the default tolerance for visual differences. default is 0.01 (1%)

==== Sleep_between_tries 
- sets the sleep time (in seconds) between match tries (requires max_no_tries > 1). Defaults to 0.5

==== browser_folders 
- *Currently only available with Selenium-Webdriver / Capybara* - create reference folders based on the current Selenium driver's browser. Allows for cross-browser visual testing.

==== Configuration settings are set with the following:

  LooksGood.config do |c|
    c.reference_image_path = 'some/path'
    c.max_no_tries = 1
    c.default_within = 0.01
    c.sleep_between_tries = 0.5
    c.browser_folders = false
  end

-------------------------------------
=== Usage:

Identify an element to match, for example:

        @element = page.find(:css, 'main')

Use LooksGood's custom matcher and specify the reference image:
        
        expect(@element).to look_like("main_section.png")

LooksGood will take care of cropping the element and try and make a targeted match without the noise of the whole page.

If you want to adjust how tolerant the matcher is of differences, specify a float between 0 and 1 to `within`

        expect(@element).to look_like("main_section.png", within: 0.05)

If no reference image exits, the test will pass and a reference file will be created for future comparisons.

If you encounter a failure for a desired change, a diff image will be created to visualze the differences as well as a reference to the new version. you can either copy the file provided in the error, or run your test suite again with `LOOKS_GOOD=true` to update it to the new version. 


-------------------------------------

==== Non-gem dependencies:

Imagemagick must be installed:

  $sudo apt-get install imagemagick

-------------------------------------


== Contributing to looks_good

* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet
* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it
* Fork the project
* Start a feature/bugfix branch
* Commit and push until you are happy with your contribution
* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.
* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.

== History
looks_good is a form of the [gatling gem](https://github.com/gabrielrotbart/gatling) with expanded functionality 

== Copyright

Copyright (c) 2022 Russell Jennings See LICENSE.txt for
further details.

